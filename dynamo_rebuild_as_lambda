import boto3, json, os
from urllib.request import urlopen

def lambda_handler(event, context):
    #Polling Lambda function on API Gateway to determine the active/live region

    url = os.environ['URL']

    try:
        response = urlopen(url)
        data_json = json.loads(response.read())
        print(data_json['aws_region_lambda'])
    except Exception as e:
        print(f'Unable to open', url, 'error', e, 'was returned')
        exit(1)

    '''The normal 'primary' region for this application is us-east-2(Ohio).  If the API returns us-east-2 as the live region, we will safely
    drop the Dynamo table in the failover region, us-east-1(Virginia), so that it can be rebuilt. If we are running live in the failover region 
    the API will return a value of us-east-1.  If that is the case we will NOT rebuild the Dynamo table in us-east-2 and stop execution'''

    if data_json['aws_region_lambda'] == 'us-east-1':
        print('We are running live in the failover environment, thus we will not rebuild the Dynamo table')
    elif data_json['aws_region_lambda'] == 'us-east-2':
        print('We are running live in the primary environment, we will begin the process of dropping the Dynamo table in the failover region')

        dynamodb = boto3.client(service_name='dynamodb', region_name='us-east-1')
        print("The table that is going to be dropped and recreated is: ", 'EmailDomainBlackList')

        '''Attempt to read the table to confirm it exists, then drop the table
           have a built-in sleep of 30sec to give AWS time to drop the table before attempting to create a new 
           table with the same name'''

        try:
            print(dynamodb.describe_table(TableName='<TABLENAME'))
            print("Deleting the table EmailDomainBlackList")

        except:
            print("The table EmailDomainBlackList could not be found. Aborting")

        try:
            dynamodb.delete_table(TableName='<TABLENAME>')

            waiter = dynamodb.get_waiter('table_not_exists')

            waiter.wait(
                TableName='EmailDomainBlackList',
                WaiterConfig={
                    'Delay': 20,
                    'MaxAttempts': 10
                }
            )

            print("Recreating the table EmailDomainBlackList")

            '''Building the new Dynamo table, HASH key is the primary key, RANGE key is the sort key, need to build all attribute
            definitions before specifying them in the Global Index (source attribute).  Tags is throwing an error, 
            not clear why at the moment'''

            dynamodb.create_table(
                BillingMode='PAY_PER_REQUEST',
                AttributeDefinitions=[
                    {
                        'AttributeName': 'emailDomain',
                        'AttributeType': 'S'
                    },
                    {
                        'AttributeName': 'email',
                        'AttributeType': 'S'
                    },
                    {
                        'AttributeName': 'source',
                        'AttributeType': 'S'
                    },
                ],
                KeySchema=[
                    {
                        'AttributeName': 'emailDomain',
                        'KeyType': 'HASH'
                    },
                    {
                        'AttributeName': 'email',
                        'KeyType': 'RANGE'
                    },
                ],
                TableName='EmailDomainBlackList',
                GlobalSecondaryIndexes=[
                    {
                        'IndexName': 'source-email-index',
                        'KeySchema': [
                            {
                                'AttributeName': 'source',
                                'KeyType': 'HASH'
                            },
                            {
                                'AttributeName': 'email',
                                'KeyType': 'RANGE'
                            },
                        ],
                        'Projection': {
                            'ProjectionType': 'ALL',
                            #  'NonKeyAttributes': [
                            #      'string',
                            #  ]
                        },
                    },
                ],
                # Tags=[
                #    {
                #        'Key': 'Application',
                #        'Value': 'TestWebkeyServerCloud'
                #    },
                #    {
                #        'Key': 'Owner',
                #        'Value': 'testwebkeysupport.plm@siemens.com'
                #    },
                # ]
            )

        except Exception as e:
            print("Threw exception ", e, "in the delete/recreate process")

    else:
        print(f'Value', data_json['aws_region_lambda'], 'is not an expected return value, halting execution.')
